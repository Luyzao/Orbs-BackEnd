// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  avatarUrl String?
  expenses  Expense[]
  goals     Goal[]
  incomes Income[] 
  incomesummary IncomeSummary[]
  balance   Balance?
  expensesAnalysis ExpenseAnalysis[]

}

model Expense {
  id                 String   @id @default(uuid())
  title              String
  amount             Float
  date               DateTime
  isCredit           Boolean  @default(false) // Se a compra foi feita no crédito
  totalInstallments  Int? // Total de parcelas (se foi parcelado)
  currentInstallment Int? // Número da parcela atual
  categoryId         String
  category           Category @relation(fields: [categoryId], references: [id])
  userId             String
  user               User     @relation(fields: [userId], references: [id])
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  color    String? // Cor para o gráfico (ex: "#A020F0")
  expenses Expense[]
}

model Goal {
  id        String     @id @default(uuid())
  title     String
  target    Float
  progress  Float      @default(0)
  status    GoalStatus @default(PENDING)
  category  String?    // se for nullable, ou o tipo correto
  imageUrl  String?    // se for nullable, ou o tipo correto
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
}

enum GoalStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Balance {
  id     String   @id @default(uuid())
  value  Float
  date   DateTime
  user   User     @relation(fields: [userId], references: [id])
  userId String   @unique
}

model Income {
  id     String   @id @default(uuid())
  date   DateTime
  user   User     @relation(fields: [userId], references: [id])
  userId String   
  income Float
  extraincome Float
  otherincome Float
  month DateTime
}

model IncomeSummary {
  id            String      @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String   
  total         Float
  impostoRenda  Float
  createdAt     DateTime 
  month DateTime
  
}

model ExpenseAnalysis {
  id            String      @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String   
  total         Float
  categoriaMaiorGasto  Float
  diferencamensal Float
  createdAt     DateTime 
}
